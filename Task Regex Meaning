Task1:
The regular expression ^[a-zA-Z0-9]{8,12}$ matches strings that are 8 to 12 characters long and contain only alphanumeric characters (letters and digits). It ensures the string starts and ends with these characters, with no spaces or special characters allowed. In this code, it is used to validate passwords.

Password: password123 - Valid: True
Password: 12345 - Valid: False
Password: validpassword - Valid: False
Password: TooLongPassword123 - Valid: False
Password: short - Valid: False
Password: 12345678 - Valid: True
Password: password123! - Valid: False
Password: valid123 - Valid: True

Task2:
The regex \b(\d{2})-(\d{2})-(\d{4})\b is used to find dates in the format dd-mm-yyyy. \d{2} matches two digits for day and month. \d{4} matches four digits for the year. \b ensures word boundaries to avoid partial matches (like 11-1-2022). The code extracts these dates, converts them into yyyy-mm-dd format, and replaces them in the text.

Original dates and converted dates:
Original: 12-03-2021 -> Converted: 2021-03-12
Original: 20-05-2022 -> Converted: 2022-05-20
Original: 15-06-2022 -> Converted: 2022-06-15
Original: 05-11-2022 -> Converted: 2022-11-05
Original: 01-12-2022 -> Converted: 2022-12-01

Modified text:

The project started on 2021-03-12 and ended on 2022-05-20.
There was a meeting on 2022-06-15, and another on 2022-11-05.
Final reports were due by 2022-12-01.

Task3:
The regex matches a typical email address that starts and ends with a word boundary (whitespace or punctuation), has an alphanumeric username (with allowed special characters), and contains a valid domain name with at least one period separating the domain and a valid TLD (like .com, .org, etc.).

File content:
 john.doe@example.com
jane_doe123@subdomain.mail.org
support@company.co
info@website.co.uk
admin@service.net
test.user@domain.com
contact@business.org
test@com
user@.invalid
domain@missingdotcom
@nouser.com
plainaddress
missing@domain,com
wrong@format@domain.com
Checking email: john.doe@example.com
Checking email: jane_doe123@subdomain.mail.org
Checking email: support@company.co
Checking email: info@website.co.uk
Checking email: admin@service.net
Checking email: test.user@domain.com
Checking email: contact@business.org
Raw emails found: ['john.doe@example.com', 'jane_doe123@subdomain.mail.org', 'support@company.co', 'info@website.co.uk', 'admin@service.net', 'test.user@domain.com', 'contact@business.org']
Cleaned emails: ['john.doe@example.com', 'jane_doe123@subdomain.mail.org', 'test.user@domain.com', 'contact@business.org']

Modified text (emails replaced with [EMAIL]):
[EMAIL]
[EMAIL]
[EMAIL]
[EMAIL]
[EMAIL]
[EMAIL]
[EMAIL]
test@com
user@.invalid
domain@missingdotcom
@nouser.com
plainaddress
missing@domain,com
wrong@format@domain.com
Extracted domain: example.com
Extracted domain: subdomain.mail.org
Extracted domain: domain.com
Extracted domain: business.org

Domain counts:
example.com: 1
subdomain.mail.org: 1
domain.com: 1
business.org: 1


Domain counts:

Task4:
The regex pattern detects valid credit card numbers from text. The code extracts card numbers, masks all but the last 4 digits, and counts occurrences by issuer.

Extracted Card Numbers: ['4532756279624064', '5112345678901234', '378282246310005', '6011000990139424']

Modified text (masked credit card numbers):
Payment processed for order 12345 using card ************4064.
Customer paid with ************1234 for the subscription.
Fraud alert: ***********0005 was used suspiciously.
Refund issued to ************9424.

Card Issuer Counts:
Visa: 1
MasterCard: 1
Amex: 1
Discover: 1
