Link to Github: 
https://github.com/rpesek4/Eye-Tracking-Study-Project

Members:
Robert Spatz, Russell Pesek, 

Title:
How do programmers understand regular expressions via eye tracking?

Abstract:
We want to use eye tracking on participants while they examine uses of regular expressions in code, in order to see if there are any notable patterns of behaviors.
This could help understand best practices for using regular expressions in code so that it is more readable.

Motivation:
Understanding how programmers read examples of regular expressions could help in understanding the best way to format code that uses regular expressions. 

Related Work 1:
"Exploring regular expression comprehension"(Chapman et al., 2017)
This study investigates common usages of various regular expression features and how they affect comprehension for example using a range([0-9]) was found to be more often understood than a default character class([\d]). The authors conducted an empirical study on 42 pairs of behaviorally equivalent but syntactically different regular expressions using 180 participants.

C. Chapman, P. Wang and K. T. Stolee, "Exploring regular expression comprehension," 2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE), Urbana, IL, USA, 2017, pp. 405-416, doi: 10.1109/ASE.2017.8115653.

Related Work 2:

Related Work 3:
"How Programmers Read Regular Code: A Controlled Experiment Using Eye Tracking" (Jbara & Feitelson, 2017)​
This study explores how programmers read and comprehend regular (repetitive) code using eye-tracking techniques. The authors conducted an experiment with 18 students and 2 faculty members, measuring eye movement and reading effort.

Jbara, A., Feitelson, D.G. How programmers read regular code: a controlled experiment using eye tracking. Empir Software Eng 22, 1440–1477 (2017). https://doi.org/10.1007/s10664-016-9477-x

Related Work 4:
"Regexes are Hard: Decision-Making, Difficulties, and Risks in Programming Regular Expressions" (Michael et al., 2019)​
This paper investigates how developers use and perceive regular expressions (regexes) in real-world programming. The study combines a survey of 279 professional developers and interviews with 17 developers to understand regex challenges.

Louis G. Michael, James Donohue, James C. Davis, Dongyoon Lee, and Francisco Servant. 2020. Regexes are hard: decision-making, difficulties, and risks in programming regular expressions. In Proceedings of the 34th IEEE/ACM International Conference on Automated Software Engineering (ASE '19). IEEE Press, 415–426. https://doi.org/10.1109/ASE.2019.00047

Research Question(s):

Hypotheses:

Methods:
Showing programmers various code snippets that contain regular expressions and asking them to find an error or explain what it does.
Doing a post test survey to get participant's opinions on the different code snippets and how they were reading them.

Data to be collected:

Analysis Envisioned:

Possible threats to validity:

Impacts Envisioned:

Time Logs:

